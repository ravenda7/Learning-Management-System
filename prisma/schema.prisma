
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role
  isActive      Boolean      @default(true) // User can be deactivated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses         Course[]        @relation("InstructorCourses")
  enrollments     Enrollment[]
  quizSubmissions QuizSubmission[]
  progress        Progress[]
}

enum Role {
  student
  instructor
  admin
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  courses     Course[]  @relation("CategoryCourses")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Course {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  category    Category? @relation("CategoryCourses", fields: [categoryId], references: [id])
  categoryId   Int
  instructor   User      @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId Int

  chapters     Chapter[]
  enrollments  Enrollment[]
  status       Int      @default(1) // 1: active, 0: inactive
  thumbnail    String?  // Local path to course thumbnail (e.g., "uploads/th
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Chapter {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  orderNumber Int
  course      Course     @relation(fields: [courseId], references: [id])
  courseId    Int

  lessons     Lesson[]
  quizzes     Quiz[]
  progress    Progress[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Lesson {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  orderNumber Int
  videoPath   String?   // Local video path (e.g., "uploads/videos/lesson1.mp4")
  pdfPath     String?   // Local PDF path (e.g., "uploads/pdfs/lesson1.pdf")
  chapter     Chapter   @relation(fields: [chapterId], references: [id])
  chapterId   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Quiz {
  id          Int       @id @default(autoincrement())
  question    String
  optionA     String
  optionB     String
  optionC     String
  optionD     String
  correct     String     // correct answer: "A", "B", "C", or "D"
  chapter     Chapter    @relation(fields: [chapterId], references: [id])
  chapterId   Int

  submissions QuizSubmission[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  student    User     @relation(fields: [studentId], references: [id])
  studentId  Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
}

model QuizSubmission {
  id           Int      @id @default(autoincrement())
  student      User     @relation(fields: [studentId], references: [id])
  studentId    Int
  quiz         Quiz     @relation(fields: [quizId], references: [id])
  quizId       Int
  selected     String   // selected answer: "A", "B", "C", or "D"
  isCorrect    Boolean
  submittedAt  DateTime @default(now())

}

model Progress {
  id           Int      @id @default(autoincrement())
  student      User     @relation(fields: [studentId], references: [id])
  studentId    Int
  chapter      Chapter  @relation(fields: [chapterId], references: [id])
  chapterId    Int
  isCompleted  Boolean  @default(false)
  completedAt  DateTime?
}
